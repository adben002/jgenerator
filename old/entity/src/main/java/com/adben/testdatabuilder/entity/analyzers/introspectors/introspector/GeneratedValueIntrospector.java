package com.adben.testdatabuilder.entity.analyzers.introspectors.introspector;

import static java.lang.invoke.MethodHandles.lookup;
import static org.slf4j.LoggerFactory.getLogger;

import com.adben.testdatabuilder.core.analyzers.introspectors.Introspector;
import java.lang.reflect.Field;
import javax.persistence.GeneratedValue;
import org.slf4j.Logger;

/**
 * {@link Introspector} for doing nothing when an field is annotated with {@link GeneratedValue}.
 *
 * <p>
 *
 * For cases where the field is annotated with {@link GeneratedValue}, we don't want to set the
 * field since it is generated by inserting into the database.
 */
public class GeneratedValueIntrospector implements Introspector {

  private static final Logger LOGGER = getLogger(lookup().lookupClass());

  public GeneratedValueIntrospector() {
    super();
    LOGGER.debug("Default constructor");
  }

  @Override
  public boolean introspect(final Field field, final Object obj) throws IllegalAccessException {

    //noinspection RedundantIfStatement
    if (field.isAnnotationPresent(GeneratedValue.class)) {
      LOGGER.debug("Skip setting of a field that we should not be setting. Object: {}, field: {}",
          obj,
          field);
      return true;
    }

    LOGGER.debug("GeneratedValue does not apply to - Object: {}, field: {}", obj, field);
    return false;
  }

}
