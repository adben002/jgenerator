task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

ext {
    snapshotRepoPass = project.hasProperty('snapshotRepoPass') ? project.getProperty('snapshotRepoPass') : ''
}

def keySet = hasProperty('signing.keyId')

subprojects {
    repositories {
        mavenCentral()
    }

    group 'com.github.adben002.testdatabuilder'
    version '2.0'

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        mavenCentral()
    }

    dependencies {
        // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
        // https://mvnrepository.com/artifact/com.google.guava/guava
        compile group: 'com.google.guava', name: 'guava', version: '18.0'

        // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
        testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
        // https://mvnrepository.com/artifact/junit/junit
        testCompile group: 'junit', name: 'junit', version: '4.12'
        // https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        // https://mvnrepository.com/artifact/org.assertj/assertj-core
        testCompile group: 'org.assertj', name: 'assertj-core', version: '3.8.0'
    }

    gradle.projectsEvaluated {
        //noinspection GroovyAssignabilityCheck
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }
    if (keySet) {
        signing {
            sign configurations.archives
        }
    }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                customizePom(pom, rootProject, keySet)
                from components.java

                artifact sourcesJar
                artifact javadocJar

                // sign the pom
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                    pomFile.delete()
                }

                // sign the artifacts
                if (keySet) {
                    project.tasks.signArchives.signatureFiles.each {
                        artifact(it) {
                            def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                            if (matcher.find()) {
                                classifier = matcher.group(1)
                            } else {
                                classifier = null
                            }
                            extension = 'jar.asc'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username 'abennett'
                    password project.snapshotRepoPass
                }
            }
        }
    }

    task install(dependsOn: publishToMavenLocal) {
        group = 'Publishing'
        description = 'Installs artifacts to local Maven repository'
    }

}

def customizePom(pom, gradleProject, isKeySet) {
    pom.withXml {
        if (!isKeySet) {
            GradleException("should set key id")
        }

        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description gradleProject.description
            name 'Test data builder'
            url 'https://github.com/igr/repo-url-parser'
            organization {
                name 'adben002'
                url 'https://github.com/adben002/test-data-builder'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/adben002/test-data-builder/issues'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'http://www.opensource.org/licenses/mit-license.php'
                    distribution 'repo'
                }
            }
            scm {
                url 'scm:git@github.com:adben002/test-data-builder.git'
                connection 'scm:git@github.com:adben002/test-data-builder.git'
                developerConnection 'scm:git@github.com:adben002/test-data-builder.git'
            }
            developers {
                developer {
                    id 'adben002'
                    name 'Adam Bennett'
                    email 'adben002@gmail.com'
                }
            }
        }
    }
}
